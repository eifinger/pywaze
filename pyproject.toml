[project]
name = "pywaze"
version = "1.0+versionplaceholder.1"
description = "Asynchronous Waze client for calculating routes and travel times."
authors = [
    { name = "Kevin Stillhammer", email = "kevin.stillhammer@gmail.com" }
]
license = "MIT"
repository = "http://github.com/eifinger/pywaze"
dependencies = [
    "httpx>=0.27.0",
]
readme = "README.md"
requires-python = ">= 3.11"
classifiers = [
    "License :: OSI Approved :: MIT License",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
universal = true
dev-dependencies = [
    "pytest>=8.3.2",
    "codespell>=2.3.0",
    "mypy>=1.11.1",
    "pre-commit>=3.8.0",
    "yamllint>=1.35.1",
    "ruff>=0.5.5",
    "pre-commit-hooks>=4.6.0",
    "respx>=0.21.1",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.8",
]

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
ignore = [
    "D107",  # Missing docstring in __init__
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D404",  # First word of the docstring should not be This
    "D406",  # Section name should end with a newline
    "D407",  # Section name underlining
    "D411",  # Missing blank line before section
    "E501",  # line too long
    "E731",  # do not assign a lambda expression, use a def
]
select = [
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "C",  # complexity
    "D",  # docstrings
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "ICN001", # import concentions; {name} should be imported as {asname}
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Merge with-statements that use the same scope
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of an if block
    "T20",  # flake8-print
    "TRY004", # Prefer TypeError exception for invalid type
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "UP",  # pyupgrade
    "W",  # pycodestyle
]

[tool.ruff.mccabe]
max-complexity = 12

[tool.hatch.metadata]
allow-direct-references = true

[tool.pytest.ini_options]
addopts = "--cov --cov-report term-missing --cov=src/pywaze --asyncio-mode=auto"

[tool.coverage.report]
show_missing = true
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]
